#!/bin/bash

#set -e

function cleanup {
  if [ -d $TMPDIR ]; then
    find $TMPDIR -mindepth 1 -maxdepth 1 -type d -name '*.demesne.*' | xargs -rt rm -fv
  fi
}

trap cleanup EXIT

container=$(basename $(readlink -f $0))
cmd=$(basename $0)
root=$(readlink -f $(dirname $0))
#hostfs=/hostfs/${container}
hostfs=/hostfs
function clean_hostfs {
  echo "$1" | sed -e 's/\(\/hostfs\)\1\+/\1/g'
}
pwd=$(clean_hostfs $hostfs$PWD)
user_name=demesne
user_home=/home/$user_name
docker_socket="$(readlink -f /var/run/docker.sock)"

function log {
  >>$root/demesne.log echo "[$(date)] $@"
}

quote () {
    echo \'${1//\'/\'\\\'\'}\'
}

#echo "container = $container"
#echo "cmd       = $cmd"
#echo "root      = $root"
#echo "hostfs    = $hostfs"
#exit 0

function build {
  uid_arg=""
  if uname -s | grep -q Linux; then
    uid_arg="--uid $(id -u)"
  fi
  t=$(mktemp -t -d build.demesne.XXXXXX)
  docker build \
    -t demesne \
    -f $root/Dockerfile.base \
    $root \
    --build-arg USER=$user_name \
    --build-arg UID_ARG="$uid_arg" \
    --build-arg GID=$(id -g) \
    --build-arg DOCKER_GROUP=$(stat -c '%G' "$docker_socket" | awk -F\\ '{print $1}') \
    --build-arg DOCKER_GID=$(stat -c '%g' "$docker_socket")
  docker build \
    -t $container \
    --rm \
    $root
}

function get_label {
  label=$1
  docker inspect --format="{{ index .Config.Labels \"demesne.${label}\"}}" $container
}

function docker_exec {
  env=()
  for line in $(grep -v '^#' $root/.env 2>/dev/null || true); do
    IFS== read key value <<<"$line"
    unset IFS
    if [ "$value" == "" ]; then
      value="${!key}"
    fi
    if [ "$value" != "" ]; then
      env+=($key=$(quote "$(echo $value | sed -e s,$HOME,$user_home,g)"))
    fi
  done
  args=()
  for arg in "$@"; do
    if [[ "$arg" == /* ]]; then
      args+=("$(clean_hostfs "${hostfs}$arg")")
    else
      args+=("$arg")
    fi
  done
  log ${args[@]}
  term=""
  if [ -t 0 ] && [ -t 1 ]; then
    term="-i -t"
  else
    term="-i"
  fi
  env_args="${env[@]}"
  exec docker exec $term $container /bin/bash -c "cd $pwd; exec /usr/bin/env $env_args PS1='\\w \\$ ' env BASH_ENV=\$HOME/.bash_env /bin/bash /alien/usedemesne \"\$@\"" -- "${args[@]}" 2>&1
}

function clean_up {
  docker stop $container || true
  docker rm -f $container || true
  docker rmi -f $container:latest
  docker rmi -f demesne:latest
}

if [ "$(docker images -q $container)" == "" ]; then
  build
else
  dockerfile_time=$(stat -c %Y $root/Dockerfile | sort -nr | head -1)
  build_time=$(get_label 'build_time')
  if [ ${build_time:-$(date +%s)} -lt $dockerfile_time ]; then
    clean_up
    build
  fi
fi

if [ "$(docker ps -qa -f name=$container)" == "" ]; then
  ud=$root/../usedemesne:/alien/usedemesne
  volumes=(-v /:$hostfs -v $ud)
  for volume in $(cat $root/.volumes 2>/dev/null || true); do
    host_volume=$(echo $volume | sed -e s,~,$HOME,g)
    container_volume=$(echo $volume | sed -e s,~,$user_home,g)
    volumes+=(-v $host_volume:$container_volume)
  done

  for link in $(cat $root/.links); do
    alien=$(readlink -f $root/../${link}.demesne)
    if [ -d "$alien" ]; then
      volumes+=(-v $alien:/alien/${link}.demesne)
    fi
  done

  docker run \
    -h $container \
    --add-host=$container:0.0.0.0 \
    ${volumes[@]} \
    $(pinata-ssh-mount 2>/dev/null || true) \
    -w "$pwd" \
    -td \
    --name $container \
    --label demesne.build_time=$(date +%s) \
    --cap-add=SYS_ADMIN \
    --cap-add=SYS_PTRACE \
    --privileged \
    --net=host \
    $container \
    >/dev/null
fi

if [ "$(docker ps -qa -f name=$container -f status=running)" == "" ]; then
  docker start $container >/dev/null
fi

if [ "$cmd" == "${container}-shell" ]; then
  docker_exec bash
else
  docker_exec "$cmd" "$@"
fi
